#!/bin/bash

# Colors and Formatting
bold='\033[1m'
normal='\033[0m'
red='\033[0;31m'
green='\033[0;32m'
blue='\033[0;34m'
yellow='\033[0;33m'
cyan='\033[0;36m'
reset='\033[0m'

# Directories
BASE_DIR="/home/$USER/AMD"
APP_DIR="$BASE_DIR/App"
SCANS_DIR="$BASE_DIR/Scans"
LOGS_DIR="$BASE_DIR/Logs"
SCRIPTS_DIR="$BASE_DIR/Scripts"
MALWARES_FILE="$BASE_DIR/databases/malwares_hash.txt"
MALWARES_PACKAGES="$BASE_DIR/databases/malwares_packages.txt"
YARA_RULES_DIR="$BASE_DIR/yara_rules"
ABOOTIMG_TOOL="/usr/bin/abootimg"
ANDROID_DIR="$BASE_DIR/App/Files"

# Create directories in /tmp for additional logging
mkdir -p /tmp/adb_analysis_logs
mkdir -p /tmp/adb_analysis_text

# Ensure directories exist
ensure_directory() {
    local dir_path="$1"
    if [ ! -d "$dir_path" ]; then
        mkdir -p "$dir_path"
    fi
}

ensure_directory "$APP_DIR"
ensure_directory "$SCANS_DIR"
ensure_directory "$LOGS_DIR"
ensure_directory "$SCRIPTS_DIR"
ensure_directory "$YARA_RULES_DIR"
ensure_directory "$ANDROID_DIR"



pull_files(){
	adb pull /storage/sdcard0 $ANDROID_DIR

}

unpull(){
	rm -rvf $ANDROID_DIR
}

# Function to print in cyan color
print_cyan() {
    echo -e "\033[0;36m$1\033[0m"
}

# Display the KYGNUS logo in cyan
print_cyan """


██   ██ ██    ██  ██████  ███    ██ ██    ██ ███████ 
██  ██   ██  ██  ██       ████   ██ ██    ██ ██      
█████     ████   ██   ███ ██ ██  ██ ██    ██ ███████ 
██  ██     ██    ██    ██ ██  ██ ██ ██    ██      ██ 
██   ██    ██     ██████  ██   ████  ██████  ███████ 
                                                     
                                                     

                                                                     
"""

# Print header
print_header() {
    printf "\n${bold}${green}------------------------------------------------${reset}\n"
    printf "${green}🛡️ AMD - Android Malware Detect ${reset}\n"
    printf "${green}🌐 KYGnus - Koosha Yeganeh Gnu Linux Softwares ${reset}\n"
    printf "${bold}${green}------------------------------------------------${reset}\n\n"
}

# Function to start ADB server
start_adb() {
    echo -e "${yellow}Starting ADB server...${reset}"
    adb start-server
    sleep 2
}

# Function to ensure the device is connected
check_device() {
    adb devices | grep -q "device$"
    if [ $? -ne 0 ]; then
        echo -e "${red}No device connected. Please connect a device and try again.${reset}"
        exit 1
    fi
}

# Function to check if storage is properly mounted and accessible
check_storage() {
    echo -e "${yellow}Checking storage...${reset}"
    if adb shell "ls /storage/sdcard0" >/dev/null 2>&1; then
        echo -e "${green}Storage is properly mounted and accessible${reset}"
    else
        echo -e "${red}No Storage Detected [ ERROR ]${reset}"
        echo -e "${red}Please Mount Storage And Start Scan Later${reset}"
        exit 1
    fi
}

# Function to check if device directories exist
check_directories() {
    echo -e "${yellow}Checking device directories...${reset}"
    directories=("/storage/sdcard0/Android" "/storage/sdcard0/Download")
    for dir in "${directories[@]}"; do
        if adb shell "ls $dir" >/dev/null 2>&1; then
            echo -e "${green}Directory $dir exists [ OK ]${reset}"
        else
            echo -e "${red}Directory $dir does not exist [ ERROR ]${reset}"
        fi
    done
}

# Function to check permissions for installed packages
check_permissions() {
    echo -e "${yellow}Checking permissions for all installed packages...${reset}"
    for package in $(adb shell pm list packages | cut -f 2 -d ":"); do
        echo -e "${cyan}Permissions for $package:${reset}"
        adb shell dumpsys package $package | grep permission
        echo ""
    done
}

# Function to monitor network activity
monitor_network() {
    echo -e "${yellow}Monitoring network connections...${reset}"
    adb shell netstat > /tmp/adb_analysis_logs/network_connections.txt

    echo -e "${yellow}Logging network activity...${reset}"
    adb shell tcpdump -i any -s 0 -w /storage/sdcard0/network_activity.pcap &
    TCPDUMP_PID=$!
    sleep 10
    adb shell kill $TCPDUMP_PID
    adb pull /storage/sdcard0/network_activity.pcap /tmp/adb_analysis_logs/network_activity.pcap
    echo -e "${green}Network activity logged to /tmp/adb_analysis_logs/network_activity.pcap${reset}"
}

# Function to list running processes
list_processes() {
    echo -e "${yellow}Listing running processes...${reset}"
    adb shell ps > /tmp/adb_analysis_text/running_processes.txt
}

# Function to check CPU and memory usage of processes
check_cpu_memory() {
    echo -e "${yellow}Checking CPU and memory usage of processes...${reset}"
    adb shell top -n 1 -m 10 > /tmp/adb_analysis_text/cpu_memory_usage.txt
}

# Function to check system logs for suspicious activity
check_logs() {
    echo -e "${yellow}Checking system logs for suspicious activity...${reset}"
    adb logcat -d > /tmp/adb_analysis_logs/system_logs.txt
    grep -i "suspicious" /tmp/adb_analysis_logs/system_logs.txt > /tmp/adb_analysis_logs/suspicious_activity.txt
    echo -e "${green}System logs saved to /tmp/adb_analysis_logs/system_logs.txt${reset}"
    echo -e "${green}Suspicious activity logged to /tmp/adb_analysis_logs/suspicious_activity.txt${reset}"
}

# Function to check for known malware packages
check_malware_packages() {
    echo -e "${yellow}Scanning for known malware packages...${reset}"

    # Check if the malwares_packages.txt file exists
    MALWARES_PACKAGES="$BASE_DIR/databases/malwares_packages.txt"
    if [ ! -f "$MALWARES_PACKAGES" ]; then
        echo -e "${red}Malware packages file $MALWARES_PACKAGES not found${reset}"
        return 1
    fi

    # Read malware package names from the file
    malware_packages=()
    while IFS= read -r package; do
        malware_packages+=("$package")
    done < "$MALWARES_PACKAGES"

    # List installed packages
    files=$(adb shell pm list packages | cut -d ":" -f2)
    sdpackfiles=$(adb shell ls /storage/sdcard0/Android/data 2>/dev/null)

    # Check for malware packages
    for malware in "${malware_packages[@]}"; do
        if [[ " ${files[@]} ${sdpackfiles[@]} " =~ " ${malware} " ]]; then
            echo -e "${red}!! Malware Detected: $malware${reset}"
        fi
    done
}

# Function to hash check a file
check_hash() {
    local file_path="$1"
    local known_hash="$2"

    if [ ! -f "$file_path" ]; then
        echo -e "${red}File $file_path not found${reset}"
        return 1
    fi

    computed_hash=$(sha256sum "$file_path" | awk '{print $1}')
    
    if [ "$computed_hash" == "$known_hash" ]; then
        echo -e "${green}Hash check passed for $file_path${reset}"
        return 0
    else
        echo -e "${red}Hash check failed for $file_path${reset}"
        return 1
    fi
}

# Function to list and execute scripts
list_scripts() {
    if [ -d "$SCRIPTS_DIR" ]; then
        script_count=$(ls -1 "$SCRIPTS_DIR"/*.{sh,py} 2>/dev/null | wc -l)
        echo -e "${bold}${blue}Number of Scripts in $SCRIPTS_DIR: $script_count${reset}"
        echo -e "${bold}${blue}Script Names:${reset}"
        for script in "$SCRIPTS_DIR"/*.{py}; do
            [ -e "$script" ] && echo "$(basename "$script")"
        done
    else
        echo -e "${red}Directory $SCRIPTS_DIR does not exist${reset}"
    fi
}

# Function to execute Python scripts
scan_with_yara() {
    echo -e "${yellow}Scanning with YARA rules...${reset}"

    # Check if YARA rules path is provided
    if [ -z "$1" ]; then
        echo -e "${red}Error: No YARA rules path provided.${reset}"
        echo -e "${red}Usage: $(basename "$0") --scan --yara <YARA_RULES_DIR>${reset}"
        return 1
    fi

    YARA_RULES_DIR="$1"

    # Check if the provided YARA rules path exists
    if [ ! -f "$YARA_RULES_DIR" ]; then
        echo -e "${red}Error: YARA rules file $YARA_RULES_DIR does not exist.${reset}"
        return 1
    fi

    # Determine the correct scan directory on the device
    SCAN_DIR="/storage/sdcard0"
    if ! adb shell "ls $SCAN_DIR" &> /dev/null; then
        SCAN_DIR="/sdcard"
        if ! adb shell "ls $SCAN_DIR" &> /dev/null; then
            SCAN_DIR="/mnt/sdcard"
            if ! adb shell "ls $SCAN_DIR" &> /dev/null; then
                echo -e "${red}Error: No valid storage directory found.${reset}"
                return 1
            fi
        fi
    fi

    echo -e "${cyan}Using scan directory: $SCAN_DIR${reset}"

    # Create a temporary directory on the laptop to store files
    TEMP_DIR=$(mktemp -d)
    adb pull "$SCAN_DIR" "$TEMP_DIR"

    if [ $? -ne 0 ]; then
        echo -e "${red}Error: Failed to pull files from the device.${reset}"
        rm -rf "$TEMP_DIR"
        return 1
    fi

    # Create a directory to store the YARA scan report
    YARA_REPORT_DIR="$BASE_DIR/YARAReports"
    mkdir -p "$YARA_REPORT_DIR"

    # Run YARA scan on the pulled files
    yara -r "$YARA_RULES_DIR" "$ANDROID_DIR" > "$YARA_REPORT_DIR/yara_scan_report.txt"
    
    if [ $? -eq 0 ]; then
        echo -e "${green}YARA scan completed. Report saved to $YARA_REPORT_DIR/yara_scan_report.txt${reset}"
    else
        echo -e "${red}Error: YARA scan failed.${reset}"
        rm -rf "$TEMP_DIR"
        return 1
    fi

    # Clean up temporary directory
    rm -rf "$TEMP_DIR"
}

# Function to scan with Androguard
scan_with_androguard() {
    echo -e "${yellow}Scanning with Androguard...${reset}"

    # Create a directory to store the Androguard scan report
    ANDROGUARD_REPORT_DIR="$BASE_DIR/AndroguardReports"
    mkdir -p "$ANDROGUARD_REPORT_DIR"

    # Run Androguard scan
    androguard scan $ANDROID_DIR -o "$ANDROGUARD_REPORT_DIR/androguard_scan_report.txt"
    
    echo -e "${green}Androguard scan completed. Report saved to $ANDROGUARD_REPORT_DIR/androguard_scan_report.txt${reset}"
}

# Function to check files with file command
check_files_with_file() {
    echo -e "${yellow}Checking files with file command...${reset}"
    
    # Create a directory to store the file command results
    FILE_COMMAND_REPORT_DIR="$BASE_DIR/FileCommandReports"
    mkdir -p "$FILE_COMMAND_REPORT_DIR"

    # Run file command on files
    for file in $(adb shell ls /storage/sdcard0 | tr -d '\r'); do
        adb pull "/storage/sdcard0/$file" "$FILE_COMMAND_REPORT_DIR/"
        file "$FILE_COMMAND_REPORT_DIR/$file" > "$FILE_COMMAND_REPORT_DIR/${file}_file_type.txt"
        
        # Check if file is executable
        if grep -q "executable" "$FILE_COMMAND_REPORT_DIR/${file}_file_type.txt"; then
            echo -e "${red}Warning: Executable file detected - $file${reset}"
        fi
    done
    
    echo -e "${green}File command checks completed. Results saved to $FILE_COMMAND_REPORT_DIR/${reset}"
}

# Function to check files with strings command
check_files_with_strings() {
    echo -e "${yellow}Checking files with strings command...${reset}"
    
    # Create a directory to store the strings command results
    STRINGS_COMMAND_REPORT_DIR="$BASE_DIR/StringsCommandReports"
    mkdir -p "$STRINGS_COMMAND_REPORT_DIR"

    # Define sensitive words to check for
    sensitive_words=("encrypt" "hack" "password" "secret" "key")

    # Run strings command on files and check for sensitive words
    for file in $(adb shell ls /storage/sdcard0 | tr -d '\r'); do
        adb pull "/storage/sdcard0/$file" "$STRINGS_COMMAND_REPORT_DIR/"
        strings "$STRINGS_COMMAND_REPORT_DIR/$file" > "$STRINGS_COMMAND_REPORT_DIR/${file}_strings.txt"
        
        # Check for sensitive words in the strings output
        for word in "${sensitive_words[@]}"; do
            if grep -qi "$word" "$STRINGS_COMMAND_REPORT_DIR/${file}_strings.txt"; then
                echo -e "${red}Sensitive word detected in $file: $word${reset}"
            fi
        done
    done
    
    echo -e "${green}Strings command checks completed. Results saved to $STRINGS_COMMAND_REPORT_DIR/${reset}"
}

# Function to scan image files with abootimg
scan_img_with_abootimg() {
    echo -e "${yellow}Scanning image files with abootimg...${reset}"

    # Create a directory to store the abootimg scan report
    ABOOTIMG_REPORT_DIR="$BASE_DIR/AbootimgReports"
    mkdir -p "$ABOOTIMG_REPORT_DIR"

    # Run abootimg scan on image files
    for img in $(adb shell ls /storage/sdcard0/*.img 2>/dev/null | tr -d '\r'); do
        adb pull "$img" "$ABOOTIMG_REPORT_DIR/"
        $ABOOTIMG_TOOL "$ABOOTIMG_REPORT_DIR/$(basename $img)" > "$ABOOTIMG_REPORT_DIR/$(basename $img)_abootimg.txt"
    done
    
    echo -e "${green}Abootimg scans completed. Reports saved to $ABOOTIMG_REPORT_DIR/${reset}"
}
scan_with_clamav() {
    echo -e "${yellow}Scanning with ClamAV...${reset}"

    # Create a directory to store the ClamAV scan report
    CLAMAV_REPORT_DIR="$BASE_DIR/ClamAVReports"
    mkdir -p "$CLAMAV_REPORT_DIR"

    # Run ClamAV scan
    sudo clamscan --remove --recursive --infected --verbose $ANDROID_DIR > "$CLAMAV_REPORT_DIR/clamscan_report.txt"
    sudo /usr/local/sbin/maldet -a $ANDROID_DIR ## Scan with LMD - Linux malware Detect
    echo -e "${green}ClamAV scan completed. Report saved to $CLAMAV_REPORT_DIR/clamscan_report.txt${reset}"
}







unlock_bootloader() {
    echo "Rebooting into the bootloader..."
    adb reboot bootloader

    echo "Unlocking the bootloader (this will erase all data on the device)..."
    fastboot oem unlock
}

# Function to start scanning
start_scanning() {
    echo -e "${bold}${cyan}Starting scan...${reset}"
    
    start_adb
    check_device
    check_storage
    pull_files
    check_directories
    check_permissions
    monitor_network
    list_processes
    check_cpu_memory
    check_logs
    check_malware_packages
    scan_with_clamav
    scan_with_yara
    scan_with_androguard
    check_files_with_file
    check_files_with_strings
    scan_img_with_abootimg
    unpull
}

show_help() {
    echo -e "${bold}${cyan}Usage:${reset}"
    echo -e "  ${bold}$(basename "$0") [OPTIONS]${reset}"
    echo -e "${bold}${cyan}Options:${reset}"
    echo -e "  ${bold}--scan${reset}                Start the scanning process on the connected Android device."
    echo -e "  ${bold}--scan --clamav${reset}       Perform a malware scan using ClamAV."
    echo -e "  ${bold}--scan --yara${reset}         Perform a malware scan using YARA rules."
    echo -e "  ${bold}--scan --scripts${reset}     List and execute scripts from the Scripts directory."
    echo -e "  ${bold}--scan --bootimage${reset}   Scan the boot image for potential issues."
    echo -e "  ${bold}--check${reset}              Perform system checks including storage, directories, permissions, and more."
    echo -e "      ${bold}--check${reset} includes the following checks:"
    echo -e "      ${bold}--check --storage${reset}    Check available storage space on the device."
    echo -e "      ${bold}--check --directories${reset} Check that necessary directories exist and have correct permissions."
    echo -e "      ${bold}--check --permissions${reset} Verify that file and directory permissions are set correctly."
    echo -e "      ${bold}--check --filetype${reset}  Use the 'file' command to determine the types of specified files."
    echo -e "      ${bold}--check --strings${reset}    Extract and check strings from specified files."
    echo -e "  ${bold}--flash${reset}              Unlock the bootloader of the device."
    echo -e "  ${bold}--help${reset}               Show this help message."
}

# Main script logic
case "$1" in
    --scan)
        if [ "$2" == "--clamav" ]; then
        	pull_files
            scan_with_clamav
            unpull
        elif [ "$2" == "--yara" ]; then
            if [ -z "$3" ]; then
                echo -e "${red}Error: No YARA rules path provided.${reset}"
                echo -e "${red}Usage: $(basename "$0") --scan --yara <YARA_RULES_DIR>${reset}"
            else
            	pull_files
                scan_with_yara "$3"
                unpull
            fi
        elif [ "$2" == "--scripts" ]; then
            list_scripts
            execute_scripts
        elif [ "$2" == "--bootimage" ]; then
            scan_img_with_abootimg
        else
            start_scanning
        fi
        ;;
    --check)
        if [ "$2" == "--storage" ]; then
            check_storage
        elif [ "$2" == "--directories" ]; then
            check_directories
        elif [ "$2" == "--permissions" ]; then
            check_permissions
        elif [ "$2" == "--filetype" ]; then
            check_files_with_file
        elif [ "$2" == "--strings" ]; then
            check_files_with_strings
        else
            echo -e "${red}Invalid option for --check. Use --help for usage information.${reset}"
            exit 1
        fi
        ;;
    --flash)
        unlock_bootloader
        ;;
    --help)
        show_help
        ;;
    *)
        echo -e "${red}Invalid option. Use --help for usage information.${reset}"
        exit 1
        ;;
esac
